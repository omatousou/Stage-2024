% % Charger l'image
% img = gradient_magnitude; % Assurez-vous que l'image est dans le répertoire de travail
% 
% % Conversion en niveaux de gris si l'image est en couleur
% if size(img, 3) == 3
%     img = rgb2gray(img);
% end
% 
% % Binariser l'image (seuil automatique)
% bw = imbinarize(img);
% 
% % Inverser l'image binaire si nécessaire
% % bw = ~bw; % Utilisez cette ligne si les trous sont blancs sur fond noir
% 
% % Calculer les moments de l'image binaire
% stats = regionprops(bw, 'Centroid');
% 
% % Obtenir le centre de la forme
% centroid = stats.Centroid;
% 
% % Afficher les résultats
% figure;
% imagesc(img);
% hold on;
% plot(centroid(1), centroid(2), 'r*', 'MarkerSize', 10, 'LineWidth', 2);
% title('Centre de la forme avec un trou');
% hold off;




% Charger l'image
img = tache(100:150,970:1020); % Assurez-vous que l'image est dans le répertoire de travail


% Définir les filtres de Sobel
Sobel_x = [-1 0 1; -2 0 2; -1 0 1];
Sobel_y = [-1 -2 -1; 0 0 0; 1 2 1];

% Appliquer les filtres de Sobel
gradient_x = conv2(double(img), Sobel_x, 'same');
gradient_y = conv2(double(img), Sobel_y, 'same');

% Calculer l'amplitude et la direction des gradients
gradient_magnitude = sqrt(gradient_x.^2 + gradient_y.^2);
gradient_direction = atan2(gradient_y, gradient_x);


% Afficher les résultats
figure;
subplot(2, 2, 1);
imagesc(img);
axis equal
title('Image originale');

subplot(2, 2, 2);
imagesc(gradient_magnitude);
axis equal
title('Amplitude des gradients');

subplot(2, 2, 3);
imagesc(gradient_direction);
axis equal
title('Direction de sgradient');
